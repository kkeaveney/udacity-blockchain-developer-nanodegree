// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require('SupplyChain')

contract('SupplyChain', function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli

    const defaultAccount = accounts[0];
    const farmer = accounts[1];
    const distributor = accounts[2];
    const retailer = accounts[3];
    const consumer = accounts[4];

    console.log("ganache-cli accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("Farmer: accounts[1] ", accounts[1])
    console.log("distributor: accounts[2] ", accounts[2])
    console.log("retailer: accounts[3] ", accounts[3])
    console.log("Consumer: accounts[4] ", accounts[4])


    var sku = 1
    var upc = 1
    const ownerID = accounts[0]
    const originFarmName = "John Doe"
    const originFarmInformation = "Yarray Valley"
    const originFarmLatitude = "-38.239770"
    const originFarmLongitude = "144.341490"
    var productID = sku + upc
    const productNotes = "Best beans for Espresso"
    const productPrice = web3.toWei('1', "ether")
    var itemState = 0
    const emptyAddress = '0x00000000000000000000000000000000000000'


    beforeEach(async function() {
      this.contract = await SupplyChain.new({from: defaultAccount});

      await this.contract.addFarmer(farmer, {from: defaultAccount});
      await this.contract.addDistributor(distributor, {from: defaultAccount});
      await this.contract.addRetailer(retailer, {from:defaultAccount});
      await this.contract.addConsumer(consumer, {from:defaultAccount});
    });



    // 1st Test
    it("Testing smart contract function PlantItem() that allows a farmer to harvest coffee", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Declare and Initialize a variable for event
        var eventEmitted = false

        // Watch the emitted event Planted()
        var event = supplyChain.Planted()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // Mark an item as Harvested by calling function harvestItem()
        await supplyChain.plantItem(upc, farmer, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes)

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBuffer = await supplyChain.fetchItem.call(upc);

        // Verify the result set
        assert.equal(resultBuffer[0], sku, 'Error: Invalid item SKU');
        assert.equal(resultBuffer[1], upc, 'Error: Invalid item UPC');
        assert.equal(resultBuffer[2], farmer, 'Error: Missing or Invalid ownerID');
        assert.equal(resultBuffer[4], originFarmName, 'Error: Missing or Invalid ManufacturerName');
        assert.equal(resultBuffer[5], itemState, 'Error: Invalid item State');
        assert.equal(eventEmitted, true, 'Invalid event emitted');

        console.log('Planted', resultBuffer[5].toNumber());
    })

    // 2nd Test
    it("Testing smart contract function harvestItem() that allows a farmer to process coffee", async() => {
      const supplyChain = await SupplyChain.deployed()

     // Declare and Initialize a variable for event
       var eventEmitted = false;

     // Watch the emitted event Harvested()
       var event = supplyChain.Harvested()
       await event.watch((err,res) => {
         eventEmitted = true;
       })

     // Mark an item as Harvested by calling function processtItem()

     const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
     const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

     await supplyChain.harvestItem(upc, {from: farmer});



     // Verify the result set
     //assert.equal(eventEmitted, true,'Invalid event emitted');
     //assert.equal(resultBuffer[5], 1, 'Error: Invalid item State');

     //console.log('Harvested',resultBuffer[5].toNumber());

    })

    // 3rd Test
    it("Testing smart contract function packItem() that allows a farmer to pack coffee", async() => {
      const supplyChain = await SupplyChain.deployed()

   // Declare and Initialize a variable for event
     var eventEmitted = false;

   // Watch the emitted event Harvested()
     var event = supplyChain.Packed()
     await event.watch((err,res) => {
       eventEmitted = true;
     })

   // Mark an item as Harvested by calling function processtItem()

   await supplyChain.packItem(upc, {from: originFarmID});

   // Retrieve the just now saved item from blockchain by calling function fetchItem()
   const resultBuffer = await supplyChain.fetchItem.call(upc);
   // Verify the result set

   console.log('Packed', resultBuffer[5].toNumber());

   assert.equal(eventEmitted, true,'Invalid event emitted');
   assert.equal(resultBuffer[5], 2, 'Error: Invalid item State');



    })

    // 4th Test
    it("Testing smart contract function sellItem() that allows a farmer to sell coffee", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Declare and Initialize a variable for event
        var eventEmitted = false;

        // Watch the emitted event ForSale()
        var event = supplyChain.ForSale()
        await event.watch((err,res) => {
          eventEmitted = true;
        })

        // Mark an item as ForSale by calling function sellItem()
        await supplyChain.sellItem(upc, productPrice, distributorID, {from :originFarmID});

        const resultBuffer = await supplyChain.fetchItem.call(upc);

        console.log('Sold', resultBuffer[5].toNumber());

        // Verify the result set
        assert.equal(resultBuffer[5], 3, 'Error: Invalid item State');
        assert.equal(resultBuffer[6], productPrice, 'Error: Invalid price');
        assert.equal(resultBuffer[7], distributorID, 'Error: Missing or Invalid distributorID');
        assert.equal(eventEmitted, true, 'Invalid event emitted');

    });

    // 5th Test
    it("Testing smart contract function buyItem() that allows a distributor to buy coffee", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Declare and Initialize a variable for event
        var eventEmmited = false;

        // Watch the emitted event Sold()
        var event = supplyChain.Sold()
        await event.watch((err,res) => {
          eventEmitted = true;
        })

        // Mark an item as Sold by calling function buyItem()
        await supplyChain.buyItem(upc, {from: distributorID, value: web3.toWei(2, "ether")});

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBuffer = await supplyChain.fetchItem.call(upc);

        // Verify the result set
        console.log('Bought', resultBuffer[5].toNumber());
        assert.equal(eventEmitted, true,'Invalid event emitted');
        assert.equal(resultBuffer[5], 4, 'Error: Invalid item State');
    })

    // 6th Test
    it("Testing smart contract function shipItem() that allows a distributor to ship coffee", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Declare and Initialize a variable for event
        var eventEmitted = false;

        // Watch the emitted event Shipped()
        var event = supplyChain.Shipped()
        await event.watch((err,res) =>{
          eventEmitted = true;
        })

        // Mark an item as Sold by calling function shipItem()
        await supplyChain.shipItem(upc, retailerID,{from: distributorID});

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBuffer = await supplyChain.fetchItem.call(upc);

        // Verify the result set
        console.log('Shipped', resultBuffer[5].toNumber());
        assert.equal(eventEmitted, true,'Invalid event emitted');
        assert.equal(resultBuffer[5], 5, 'Error: Invalid item State');
    })

    // 7th Test
    it("Testing smart contract function receiveItem() that allows a retailer to mark coffee received", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Declare and Initialize a variable for event
        var eventEmitted = false;

        // Watch the emitted event Received()
        var event = supplyChain.Received()
        await event.watch((err,res) =>{
          eventEmitted = true;
        })

        // Mark an item as Sold by calling function receiveItem()
        await supplyChain.receiveItem(upc,{from: retailerID});

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBuffer = await supplyChain.fetchItem.call(upc);

        // Verify the result set
        console.log('Received Item', resultBuffer[5].toNumber());
        assert.equal(eventEmitted, true,'Invalid event emitted');
        assert.equal(resultBuffer[5], 6, 'Error: Invalid item State');
    })

    // 8th Test
    it("Testing smart contract function purchaseItem() that allows a retailer to sell coffee", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Declare and Initialize a variable for event
        var eventEmitted = false;

        // Watch the emitted event Purchased()
        var event = supplyChain.Purchased()
        await event.watch((err, res) =>{
          eventEmitted = true;
        })

        // Mark an item as Sold by calling function purchaseItem()
        await supplyChain.purchaseItem(upc,consumerID,{from: retailerID});

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBuffer = await supplyChain.fetchItem.call(upc);


        // Verify the result set
        console.log('Purchased Item', resultBuffer[5].toNumber());
        assert.equal(eventEmitted, true,'Invalid event emitted');
        assert.equal(resultBuffer[5], 7, 'Error: Invalid item State');
    })

    // 9th Test
    it("Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);

        // Verify the result set:
        _assertBufferOne(resultBufferOne, consumerID);
    })

    // 10th Test
    it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

        // Verify the result set:
        _assertBufferTwo(resultBufferTwo, consumerID);

    })

});
